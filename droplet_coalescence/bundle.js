(()=>{"use strict";class t{constructor(t,e=0){this.bounds={x:t.x||0,y:t.y||0,width:t.width,height:t.height},this.maxObjects="number"==typeof t.maxObjects?t.maxObjects:10,this.maxLevels="number"==typeof t.maxLevels?t.maxLevels:4,this.level=e,this.objects=[],this.nodes=[]}getIndex(t){return t.qtIndex(this.bounds)}split(){const e=this.level+1,s=this.bounds.width/2,i=this.bounds.height/2,h=this.bounds.x,r=this.bounds.y,n=[{x:h+s,y:r},{x:h,y:r},{x:h,y:r+i},{x:h+s,y:r+i}];for(let h=0;h<4;h++)this.nodes[h]=new t({x:n[h].x,y:n[h].y,width:s,height:i,maxObjects:this.maxObjects,maxLevels:this.maxLevels},e)}insert(t){if(this.nodes.length){const e=this.getIndex(t);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(t);return}if(this.objects.push(t),this.objects.length>this.maxObjects&&this.level<this.maxLevels){this.nodes.length||this.split();for(let t=0;t<this.objects.length;t++){const e=this.getIndex(this.objects[t]);for(let s=0;s<e.length;s++)this.nodes[e[s]].insert(this.objects[t])}this.objects=[]}}retrieve(t){const e=this.getIndex(t);let s=this.objects;if(this.nodes.length)for(let i=0;i<e.length;i++)s=s.concat(this.nodes[e[i]].retrieve(t));return 0===this.level?Array.from(new Set(s)):s}remove(t,e=!1){const s=this.objects.indexOf(t);s>-1&&this.objects.splice(s,1);for(let e=0;e<this.nodes.length;e++)this.nodes[e].remove(t);return 0!==this.level||e||this.join(),-1!==s}update(t,e=!1){this.remove(t,e),this.insert(t)}join(){let t=Array.from(this.objects);for(let e=0;e<this.nodes.length;e++){const s=this.nodes[e].join();t=t.concat(s)}const e=Array.from(new Set(t));if(e.length<=this.maxObjects){this.objects=e;for(let t=0;t<this.nodes.length;t++)this.nodes[t].objects=[];this.nodes=[]}return t}clear(){this.objects=[];for(let t=0;t<this.nodes.length;t++)this.nodes.length&&this.nodes[t].clear();this.nodes=[]}}class e{constructor(t){this.x=t.x,this.y=t.y,this.r=t.r,this.data=t.data}qtIndex(t){const s=[],i=t.width/2,h=t.height/2,r=t.x+i,n=t.y+h,o=[[r,t.y],[t.x,t.y],[t.x,n],[r,n]];for(let t=0;t<o.length;t++)e.intersectRect(this.x,this.y,this.r,o[t][0],o[t][1],o[t][0]+i,o[t][1]+h)&&s.push(t);return s}static intersectRect(t,e,s,i,h,r,n){const o=t-Math.max(i,Math.min(t,r)),a=e-Math.max(h,Math.min(e,n));return o*o+a*a<s*s}}class s{constructor(t,e,s,i){this.x=t,this.y=e,this.area=s,this.id=i}absorb(t){const e=this.area+t.area;this.x=(this.x*this.area+t.x*t.area)/e,this.y=(this.y*this.area+t.y*t.area)/e,this.area=e}radius(){return Math.sqrt(this.area/Math.PI)}qtIndex(t){return e.prototype.qtIndex.call({x:this.x,y:this.y,r:this.radius()},t)}}function i(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))}class h{constructor(e,s,i,h){this.width=e,this.height=s,this.n_samples=i,this.sample_droplet_area=h,this.cur_id=0,this.quadtree=new t({width:e,height:s,maxObjects:4,maxLevels:6}),this.largest_droplet_area=0}addDroplet(t){for(;;){let e=this.quadtree.retrieve(t),s=null;for(const h of e)if(i(t,h)<=t.radius()+h.radius()){this.quadtree.remove(h,!0),h.absorb(t),s=h;break}if(!s)break;t=s}t.area>this.largest_droplet_area&&(this.largest_droplet_area=t.area),this.quadtree.insert(t)}droplets(){return this.quadtree.retrieve(new s(this.width/2,this.height/2,1e10,0))}step(){for(var t=0;t<this.n_samples;++t)this.addDroplet(new s(Math.random()*this.width,Math.random()*this.height,this.sample_droplet_area,++this.cur_id))}draw(t){const e=this.droplets();for(const s of e)t.fillStyle="rgb(200 0 0)",t.beginPath(),t.arc(s.x,s.y,s.radius(),0,2*Math.PI),t.fill()}}window.addEventListener("load",function(){return t=this,e=void 0,i=function*(){const t=document.getElementById("canvas"),e=t.getContext("2d"),s=new h(t.width,t.height,500,250);if(!e)throw new Error("unsupported 2d canvas");for(;s.largest_droplet_area<t.width*t.height/4;){if(s.step(),e.clearRect(0,0,t.width,t.height),s.draw(e),1==s.droplets.length)return;yield new Promise(t=>setTimeout(t,30))}},new((s=void 0)||(s=Promise))(function(h,r){function n(t){try{a(i.next(t))}catch(t){r(t)}}function o(t){try{a(i.throw(t))}catch(t){r(t)}}function a(t){var e;t.done?h(t.value):(e=t.value,e instanceof s?e:new s(function(t){t(e)})).then(n,o)}a((i=i.apply(t,e||[])).next())});var t,e,s,i})})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,